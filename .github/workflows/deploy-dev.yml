name: Deploy to DEV

on: [workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: sqs-actions/configure-sqs-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TRACK_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TRACK_DEV }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: sqs-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build --tag $ECR_REPOSITORY:$IMAGE_TAG --tag $ECR_REPOSITORY:dev --no-cache -f service/Dockerfile .
          docker push $ECR_REPOSITORY --all-tags
  deploy-dev:
    needs: build
    runs-on: [self-hosted, argocd]
    env:
      SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
      ENVIRONMENT_NAME: dev
    steps:
      - name: Argo-CD Deployment
        run: |
          argocd login "${{ secrets.ARGOCD_HOST }}" \
            --grpc-web \
            --username "${{ secrets.ARGOCD_USER }}" \
            --password "${{ secrets.ARGOCD_PASSWORD }}"
          argocd app set  "datahub-dev-mm-ml" --parameter global.image.tag=${{ github.sha }}
          argocd app wait "datahub-dev-mm-ml" --operation --health --timeout 600
      - name: ArogCD Link
        run: echo "https://${{ secrets.ARGOCD_HOST }}/applications/${{ secrets.TEAM }}-${{ env.ENVIRONMENT_NAME }}-${{ env.SERVICE_NAME }}"
